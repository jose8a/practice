## `fast_intersection`
Given `arr1` and `arr2`, find the intersection of both sets. It should
be trivial to write an `O(n**2)` solution. Use sorting to solve in
`O(nlog(n))`. Next, improve this to `O(n)` time (maybe use a non-array
datastructure).

## `common_subsets`
Write a function that takes two arrays (`arr1` and `arr2`) of integers
and returns an array with all the subsets commmon to both.

Don't generate all subsets of `arr1` and `arr2`, which would take time
exponential in the size of `arr1`/`arr2` (and take `O(2**n)` memory as
well). Instead, directly generate the subsets of both.

## `can_win`
Given an array and index, find if it's possible to reach 0 by starting
at the index and repeatedly moving left/right by the distance found at
`array[index]`.

Hint: Use memoization to record where you've been.

## Non-Comparison Sorts
Part 1: Say that I gave you an array of length `n`, containing the
numbers `1..n` in jumbled order. "Sort" this array in `O(n)` time. You
should be able to do this without looking at the input.

Part 2: Say that I give you an array of length `n` with numbers in the
range `1..N` (`N >= n`). Sort this array in `O(n + N)` time. You may
use `O(N)` memory.

Part 3: Say I give you an array of `n` strings, each of length `k`. I
claim that, using merge sort, you can sort this in `O(knlog(n))`,
since comparing a pair of strings takes `O(k)` time.

I want you to beat that. Sort the strings in `O(kn)`. **Hint**: do not
compare any two strings. You may assume all strings contain only
lowercase letters `a..z` without whitespace or punctuation.

## `weighted_random_index`
Given an array, write a function that will return a random index of
the array. The probability of an index being returned is weighted by
the value at that index against the sum of the array values. For
example, for the array `[4, 6, 8]`, index 0 should be returned with 4
in 18 odds, index 1 should be returned with 6 in 18 odds, and index 2
should be return with 8 in 18 odds. Implement this in `O(n)` time.

## `move_zeros`
Given an array, move all zeros to the end. The order of non-zero
elements does not matter. Ex:

## `look_and_say`
Implement the 'look and say' function. 'Look and say' takes an input
array and outputs an array that describes the count of the elements in
the input array as they appear in order.

**Example:**

## Sums Upon Sums
I give you a scrambled list of `n` unique integers between 0
and `n`. Tell me what number is missing?

If I let you use `O(nlog(n))` time, what is a naive way of doing this?

Next, what if I require that you solve the problem in `O(n)` time?
What datastructure might you use?

Finally, how could you solve the problem in `O(n)`, and also `O(1)`
space?


